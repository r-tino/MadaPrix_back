// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Les Modeles
model Utilisateur {
  id_User           String    @id @default(auto()) @map("_id") @db.ObjectId
  nom_user          String
  adress            String
  email             String    @unique
  motDePasse        String
  contact           String
  role              RoleEnum
  dateCreation      DateTime  @default(now())
  derniereConnexion DateTime?
  // Champ pour la photo de profil
  photoProfil       String? // URL de la photo de profil
  photoPublicId String?

  // Relations
  commentaire      Commentaire[]              // Un utilisateur peut ecrire plusieurs commentaires.(0...*)
  notification     Notification[]             // Un utilisateur peut recevoir plusieurs notifications.(0...*)
  produits         Produit[]                  // Un utilisateur (vendeur/admin) peut publier plusieurs produits.
  note             Note[]                     // Un utilisateur peut attribuer plusieurs notes.(0...*)
  offres           Offre[]                    // Un utilisateur peut proposer plusieurs offres (en tant que vendeur/admin).

  HistoriquePrix HistoriquePrix[]
}

enum RoleEnum {
  Admin
  Vendeur
  Visiteur
}

  // Modele photo
  model Photo {
    id_Photo      String         @id @default(auto()) @map("_id") @db.ObjectId
    url           String
    couverture    Boolean

    // Une photo peut être liée à un produit (optionnel pour les photos de profil).
    produit       Produit?       @relation(fields: [produitId], references: [id_Produit])
    produitId     String?        @db.ObjectId
  }

// Modèle Produit
model Produit {
  id_Produit      String     @id @default(auto()) @map("_id") @db.ObjectId
  nom_Produit     String
  description     String
  qualiteMoyenne  Float?
  prixInitial     Float
  datePublication DateTime   @default(now())
  disponibilite   Boolean    @default(true) // Nouveau champ pour gérer la disponibilité
  isFavorite      Boolean    @default(false) // Indique si le produit est favori
  isVisited       Boolean    @default(false) // Indique si le produit a été visité

  // Valeurs des attributs dynamiques (lié à la catégorie du produit)
  valeursAttributs Json?     // { nomAttribut: valeur, ... }

  // Relations
  utilisateur      Utilisateur   @relation(fields: [utilisateurId], references: [id_User])
  utilisateurId    String        @db.ObjectId

  photos           Photo[]                    // Un produit peut avoir plusieurs photos
  offre            Offre[]                    // Un produit peut avoir plusieurs offres
  historiquePrix   HistoriquePrix[]           // Un produit peut avoir plusieurs Historique de Prix
  notes            Note[]                     // Un produit est évalué par plusieurs notes

  categorie        Categorie?   @relation(fields: [categorieId], references: [id_Categorie])
  categorieId      String?      @db.ObjectId

  Commentaire      Commentaire[]              // Un produit peut recevoir plusieurs commentaires
}


// Modele offres
model Offre {
  id_Offre       String    @id @default(auto()) @map("_id") @db.ObjectId
  prixOffre      Float
  stock          Int
  dateExpiration DateTime?

  // Relations

  // Une offre est liée à un seul produit.(1)
  produit   Produit @relation(fields: [produitId], references: [id_Produit])
  produitId String  @db.ObjectId

  // Une offre est proposée par un utilisateur (vendeur/admin).(1)
  utilisateur     Utilisateur @relation(fields: [utilisateurId], references: [id_User])
  utilisateurId   String      @db.ObjectId

  // Une offre peut avoir une promotion.(1)
   // Relation inverse vers Promotion
  promotion   Promotion?

  HistoriquePrix HistoriquePrix[]
}

// Modele Promotion
model Promotion {
  id_Promotion String   @id @default(auto()) @map("_id") @db.ObjectId
  pourcentage  Float
  dateDebut    DateTime
  dateFin      DateTime
  prixPromotionnel  Float?

  offreId            String   @unique @db.ObjectId // Ajout de @unique et du type compatible MongoDB

  // Relation vers Offre (clé étrangère)
  offre              Offre    @relation(fields: [offreId], references: [id_Offre])

  HistoriquePrix HistoriquePrix[]
}

// Modele HistoriquePrix
model HistoriquePrix {
  id_HistoriquePrix      String   @id @default(auto()) @map("_id") @db.ObjectId
  ancienPrix             Float? 
  prixModif              Float
  typePrix               TypePrixEnum
  sourceId               String   @db.ObjectId // Référence soit un produit, une offre ou une promotion
  dateChangement         DateTime @default(now()) // Géré automatiquement avec la date actuelle


 // Relation inverse avec Produit
  produit           Produit?   @relation(fields: [sourceId], references: [id_Produit])
  offre             Offre?     @relation(fields: [sourceId], references: [id_Offre])
  promotion         Promotion? @relation(fields: [sourceId], references: [id_Promotion])

  utilisateur      Utilisateur? @relation(fields: [utilisateurId], references: [id_User]) // Relation ajoutée
  utilisateurId    String?     @db.ObjectId// Ajout de la clé étrangère

  // Enum pour différencier les sources
  @@index([sourceId, typePrix]) // Index pour des requêtes plus efficaces
}

enum TypePrixEnum {
  PRODUIT
  OFFRE
  PROMOTION
}

// Modele Note
model Note {
  id_Note  String   @id @default(auto()) @map("_id") @db.ObjectId
  valeur   Int
  dateNote DateTime   @default(now())

  // Relation

  // Une note est attribuée par un utilisateur.(1)
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id_User])
  utilisateurId String      @db.ObjectId

  // Une note evalue un produit.(1)
  produit   Produit @relation(fields: [produitId], references: [id_Produit])
  produitId String  @db.ObjectId
}

// Modèle Categorie
model Categorie {
  id_Categorie   String     @id @default(auto()) @map("_id") @db.ObjectId
  nomCategorie   String
  isActive       Boolean    @default(true)
  typeCategory   String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  attributs      Attribut[] // Une catégorie peut avoir plusieurs attributs
  produits       Produit[]  // Une catégorie peut regrouper plusieurs produits
}

// Modèle Attribut
model Attribut {
  id_Attribut    String     @id @default(auto()) @map("_id") @db.ObjectId
  nomAttribut    String     // Nom de l'attribut dynamique
  estObligatoire Boolean    // Indique si l'attribut est requis
  typeAttribut   String     // Ex: "String", "Number", "Boolean", etc.
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relation avec Categorie
  categorie      Categorie  @relation(fields: [categorieId], references: [id_Categorie])
  categorieId    String     @db.ObjectId
}

// Modele Commentaire
model Commentaire {
  id_Commentaire  String   @id @default(auto()) @map("_id") @db.ObjectId
  contenu         String
  dateCommentaire DateTime  @default(now())

  // Relations

  // Un commentaire a été écrit par un utilisateur.(1)
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id_User])
  utilisateurId String      @db.ObjectId

  // Un commentaire est lié à un produit.(1)
  produit   Produit? @relation(fields: [produitId], references: [id_Produit])
  produitId String?  @db.ObjectId
}

// Modele Notification
model Notification {
  id_Notification String        @id @default(auto()) @map("_id") @db.ObjectId
  typeNotif       TypeNotifEnum
  message         String
  dateNotif       DateTime      @default(now())
  lu              Boolean       @default(false)

  // Relation avec Utilisateur

  // Une notification est envoyée à un utilisateur.(1)
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id_User])
  utilisateurId String      @db.ObjectId
}

enum TypeNotifEnum {
  Promotion
  Commentaire
  Autre
  PRISE
}
